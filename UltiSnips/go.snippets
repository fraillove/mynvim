snippet log "Description" !b
pretty.Println("### $1 ->", $1)
endsnippet

snippet ctx "Description" !b
tx, ok := c.Value("tx").(*pop.Connection)
if !ok {
	return errors.WithStack(errors.New("no transaction found"))
}
endsnippet

snippet app "Description" !b
func App() http.Handler {
	$1
}
endsnippet

snippet walk "Description" !b
err ${1::=} filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
	$2
	return nil
})
endsnippet

snippet tsu "Description" !b
ts := httptest.NewServer(${1:App()})
defer ts.Close()
endsnippet


# functions
snippet /^main/ "Main function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet /^meth/ "Method" r
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet func "Function" b
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

snippet funch "HTTP handler" b
func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
	${0:${VISUAL}}
}
endsnippet


snippet ins "Description" !b
pretty.Println("### $1 ->", $1)
endsnippet

snippet inst "Description" !b
fmt.Printf("### $1 -> %T\n", $1)
endsnippet

snippet insq "Description" !b
pretty.Printf("### $1 -> %q\n", $1)
endsnippet

snippet init "Description" b
func init() {
	$1
}
endsnippet

snippet hfunc "Description" i
func $1(res http.ResponseWriter, req *http.Request) {
	$2
}
endsnippet



# error handling
snippet err "Basic error handling" b
if err != nil {
	log.${1:Fatal}(err)
}
endsnippet


# if inline error
snippet ife "If with inline erro"
if err := ${1:condition}; err != nil {
	${0:${VISUAL}}
}
endsnippet


snippet errf "" i
if err != nil {
	log.Fatal(err)
}
endsnippet

snippet errt "" i
if err != nil {
	t.Fatal(err)
}
endsnippet

snippet errv "" i
if err != nil {
	return ${1:nil}, errors.WithStack(err)
}
endsnippet

snippet errtf "" i
if err != nil {
	t.Fatalf("$1", $2)
}
endsnippet

snippet logf "Description" i
log.Fatal($1)
endsnippet

snippet las "Description" i
http.ListenAndServe("${1::3000}", ${2:nil})
endsnippet

snippet timestamps "Descriptions" !b
CreatedAt time.Time \`json:"created_at" db:"created_at"\`
UpdatedAt time.Time \`json:"updated_at" db:"updated_at"\`
endsnippet

snippet model "Description" !b
type $1 struct {
	ID        int       "json:"id" db:"id""
	CreatedAt time.Time \`json:"created_at" db:"created_at"\`
	UpdatedAt time.Time \`json:"updated_at" db:"updated_at"\`
}
endsnippet

snippet test "" !b
func Test_$1(t *testing.T) {
  ${2:r := require.New(t)}
}
endsnippet

snippet stest "" !b
t.Run("$1", func(st *testing.T) {
	r := require.New(st)
	$2
})
endsnippet

snippet roll "" !b
th.Rollback(func(tx *pop.Connection) {
})
endsnippet

snippet efunc "" !b
func $1(ctx *echo.Context) error {
}
endsnippet

snippet bfunc "" i
func $1(c buffalo.Context) error {
	$2
}
endsnippet

snippet bmid "Description" i
func $1(next buffalo.Handler) buffalo.Handler {
	return func(c buffalo.Context) error {
		$2
	}
}
endsnippet

snippet err "" !b
if err != nil {
	return errors.WithStack(err)
}
endsnippet

snippet errr "" !b
if err := $1; err != nil {
	return errors.WithStack(err)
}
endsnippet


snippet suite "" !b
type $1Suite struct {
	th.Suite
}

func Test$1Suite(t *testing.T) {
	suite.Run(t, &$1Suite{})
}
endsnippet

snippet req "Description" i
r := require.New(t)
endsnippet



snippet json "JSON field"
\`json:"${1:displayName}"\`
endsnippet

# types and variables


# make
snippet make "make(Type, size)"
make(${1:[]string}, ${2:0})${0}
endsnippet

snippet map "Map type" b
map[${1:keytype}]${2:valtype}
endsnippet

snippet : "Variable declaration :=" b
${1:name} := ${0:value}
endsnippet

snippet var "Variable declaration" b
var ${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value}}

snippet vars "Variables declaration" b
var (
	${1:name}${2/(.+)/ /}${2:type}${3: = ${0:value} }
)
endsnippet

# Mostly converted from: https://github.com/AlanQuatermain/go-tmbundle
snippet /^cons/ "Constants declaration" r
const (
	${1:constant}${2/(.+)/ /}${2:type} = ${0:value}
)
endsnippet

snippet /^con/ "Constant declaration" r
const ${1:name}${2/(.+)/ /}${2:type} = ${0:value}
endsnippet

snippet iota "Iota constant generator" b
const (
	${1:constant}${2/(.+)/ /}${2:type} = iota
)
endsnippet

snippet struct "Struct declaration" b
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet


snippet interface "Interface declaration" b
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet

snippet if "If statement" b
if ${1:condition}${1/(.+)/ /}{
	${0:${VISUAL}}
}
endsnippet

snippet switch "Switch statement" b
switch ${1:expression}${1/(.+)/ /}{
case$0
}
endsnippet



# defer
snippet df "defer someFunction()"
defer ${1:func}(${2})
${0}
endsnippet

snippet def "defer func() { ... }"
defer func() {
	${0:${VISUAL}}
}()
endsnippet

# defer recover
snippet defr
defer func() {
	if err := recover(); err != nil {
		${0:${VISUAL}}
	}
}()
endsnippet





# fallthrough
snippet ft "fallthrough"
fallthrough
endsnippet





# Fmt Printf log
snippet fp "fmt.Print(...)"
fmt.Print($1)
endsnippet

snippet fs "fmt.Printf(...)"
fmt.Printf("$1\n", $2)
endsnippet

# Fmt Printf debug
snippet ff "fmt.Printf(...)"
fmt.Printf("${1:${VISUAL}} = %+v\n", $1)
endsnippet

# Fmt Println debug
snippet fn "fmt.Println(...)"
fmt.Println("${1:${VISUAL}}")
endsnippet

# Fmt Errorf debug
snippet fe "fmt.Errorf(...)"
fmt.Errorf("${1:${VISUAL}}")
endsnippet

# sprintf
snippet sp "fmt.Sprintf(...)"
fmt.Sprintf("%${1:s}", ${2:var})
endsnippet



# ok
snippet ok "if !ok { ... }"
if !ok {
	${0:${VISUAL}}
}
endsnippet




# panic
snippet pn "panic()"
panic("${0:msg}")
endsnippet

# return
snippet rt "return"
return ${0:${VISUAL}}
endsnippet





# goroutine named function
snippet go "go someFunc(...)"
go ${1:funcName}(${0})
endsnippet

# goroutine anonymous function
snippet gof "go func() { ... }()"
go func() {
	${1:${VISUAL}}
}()
${0}
endsnippet



snippet benchmark "func BenchmarkXYZ(b *testing.B) { ... }"
func Benchmark${1:Method}(b *testing.B) {
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		${0:${VISUAL}}
	}
}
endsnippet







# gpl
snippet gpl
/*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, see <http://www.gnu.org/licenses/>.
*
* Copyright (C) ${1:Author}, `!v strftime("%Y")`
*/
${0}
endsnippet



global !p

import re

# Automatically wrap return types with parentheses

def return_values(s):
	# remove everything wrapped in parentheses
	s = re.sub("\(.*?\)|\([^)]*$", "", s)
	return len(s.split(","))

def opening_par(snip, pos):
	if return_values(t[pos]) > 1 and not t[pos].startswith("("):
		snip.rv = "("
	else:
		snip.rv = ""

def closing_par(snip, pos):
	if return_values(t[pos]) > 1:
		snip.rv = ")"
	else:
		snip.rv = ""

endglobal

# Assignment with error
snippet awe "If with inline erro"
${0:variable}, err := ${1:code}
endsnippet

# vim:ft=snippets:
